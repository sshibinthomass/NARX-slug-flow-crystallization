# -*- coding: utf-8 -*-
"""
Export clusters from main.py output as Python lists.

This script is designed for the project: Clustering of Chemical Process Data.

Project context (from README_Clustering.md):
- The project clusters 98 chemical process files, each a time-series of 13 process variables.
- Each file is represented by the slopes (rate of change) of its variables, extracted via linear regression.
- Three clustering methods are used:
    1. K-Means (on slopes)
    2. Agglomerative (hierarchical) clustering (on slopes)
    3. K-Means on PCA-reduced slopes (for visualization and noise reduction)
- The results are validated using the Silhouette Score and presented in a comparison table.

Purpose of this script:
- To make it easy to use the cluster assignments in further Python analysis, this script reads the output CSV from main.py and writes a .py file containing Python lists for each cluster in each method.
- The output lists can be directly imported or copy-pasted into other Python scripts for further analysis, visualization, or reporting.

Output format:
    K_Mean_cluster1 = [ ... ]
    K_Mean_cluster2 = [ ... ]
    K_MeanPCA_cluster1 = [ ... ]
    K_MeanPCA_cluster2 = [ ... ]
    Agglomerative_cluster1 = [ ... ]
    Agglomerative_cluster2 = [ ... ]

How it works:
- Reads the 'clustering_comparison_results.csv' file generated by main.py.
- For each method and each cluster, collects the filenames assigned to that cluster.
- Writes a Python list for each cluster in a new file 'main_clusters_lists.py'.

This makes it easy to:
- Use the cluster assignments in further Python code
- Share or document which files belong to which cluster
- Reproduce or extend the analysis
"""

import pandas as pd

# Change this if you use a different file name
CLUSTER_CSV = 'clustering_comparison_results.csv'
OUTPUT_PY = 'main_clusters_lists.py'

def export_main_clusters_as_python_lists(csv_file=CLUSTER_CSV, output_file=OUTPUT_PY):
    """
    Reads the clustering assignments from the CSV and writes Python lists for each cluster in each method.
    """
    df = pd.read_csv(csv_file)
    # Map the CSV columns to the desired Python variable names
    method_map = {
        'KMeans_Cluster': 'K_Mean',
        'KMeans_PCA_Cluster': 'K_MeanPCA',
        'Agglomerative_Cluster': 'Agglomerative',
    }
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('# Auto-generated cluster assignments from main.py\n')
        f.write('# Each list contains the filenames assigned to that cluster by the respective method.\n\n')
        for col, pyname in method_map.items():
            for cluster in sorted(df[col].unique()):
                # Cluster numbers in output are 1-based for clarity
                files = df.loc[df[col] == cluster, 'File'].tolist()
                pylist = ', '.join([repr(x) for x in files])
                f.write(f'{pyname}_cluster{cluster+1} = [{pylist}]\n')
        f.write('\n# End of cluster assignments\n')
    print(f"Cluster assignments exported as Python lists to: {output_file}")

if __name__ == '__main__':
    export_main_clusters_as_python_lists() 